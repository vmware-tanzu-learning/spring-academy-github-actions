name: Workshop Publisher
description: Publish Educates workshops to GitHub Container Registry.

inputs:
  token:
    description: "GitHub access token."
    required: true
  path:
    description: "Relative directory path under $GITHUB_WORKSPACE to workshop files."
    required: false
    default: '.'
  workshop-resource-file:
    description: "Relative path under workshop directory to the Workshop resource file."
    required: false
    default: 'resources/workshop.yaml'
  trainingportal-resource-file:
    description: "Relative path under workshop directory to the TrainingPortal resource file."
    required: false
    default: 'resources/trainingportal.yaml'
  workshop-image-docker-file:
    description: "Path under workshop directory to the Dockerfile for the custom workshop image."
    required: false
    default: 'Dockerfile'
  image-regular-expression:
    description: "Regular expression to match any image references in Workshop resource file."
    required: false
    default: '\$\(image_repository\)/(.+):latest'
  image-replacement-string:
    description: "Replacement string for any matched image references in the Workshop resource file."
    required: false
    default: '{registry}/$1:{tag}'

runs:
  using: composite

  steps:
    - name: Install Carvel tools
      shell: bash
      run: curl -L https://carvel.dev/install.sh | bash
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Calculate release variables
      shell: bash
      id: calculate_release_variables
      run: |
        REPOSITORY_NAME=${{github.event.repository.name}}
        echo "REPOSITORY_NAME=${REPOSITORY_NAME,,}" >>${GITHUB_ENV}
        echo "REPOSITORY_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >>${GITHUB_ENV}

        if [[ "${GITHUB_REF}" == "refs/tags/"* ]]; then
          echo "REPOSITORY_TAG=${GITHUB_REF#refs/tags/}" >>${GITHUB_ENV}
        else
          echo "REPOSITORY_TAG=$(git rev-parse --short HEAD)" >>${GITHUB_ENV}
          echo "is_latest=true" >>${GITHUB_ENV}
        fi

        echo "GITHUB_TOKEN=${{inputs.token}}" >>${GITHUB_ENV}
    - name: Process workshop files
      shell: bash
      id: process_workshops
      run: |
        ${{github.action_path}}/scripts/process-workshops.sh \
          '${{inputs.path}}' \
          $REPOSITORY_NAME \
          $REPOSITORY_OWNER \
          $REPOSITORY_TAG \
          '${{inputs.image-regular-expression}}' \
          '${{inputs.image-replacement-string}}' \
          '${{inputs.workshop-resource-file}}' \
          '${{inputs.trainingportal-resource-file}}' \
          '${{runner.temp}}'
    - name: Build workshop files
      shell: bash
      if: steps.process_workshops.outputs.build_files == 'true'
      run: |
        imgpkg --debug push --file ${{inputs.path}} \
          --image ghcr.io/${REPOSITORY_OWNER}/${REPOSITORY_NAME}-files:${REPOSITORY_TAG} \
          --registry-username=${{github.actor}} \
          --registry-password=${{env.GITHUB_TOKEN}}
    - name: Build workshop manifests
      shell: bash
      if: steps.process_workshops.outputs.build_files == 'true'
      run: |
        imgpkg --debug push --file ${{runner.temp}}/workshops.yaml \
          --image ghcr.io/${REPOSITORY_OWNER}/${REPOSITORY_NAME}-workshop-manifests:${REPOSITORY_TAG} \
          --registry-username=${{github.actor}} \
          --registry-password=${{env.GITHUB_TOKEN}}
    - name: Login to GitHub container registry
      if: ${{ env.is_latest == 'true' }} || steps.process_workshops.outputs.build_image == 'true'
      uses: docker/login-action@v1
      with:
        username: ${{github.actor}}
        password: ${{env.GITHUB_TOKEN}}
        registry: ghcr.io
    - name: Tag latest image
      shell: bash
      if: ${{ env.is_latest == 'true' }}
      run: |
        ${{github.action_path}}/scripts/tag-image.sh \
          ghcr.io/${REPOSITORY_OWNER}/${REPOSITORY_NAME}-workshop-manifests:${REPOSITORY_TAG} \
          ghcr.io/${REPOSITORY_OWNER}/${REPOSITORY_NAME}-workshop-manifests:latest
    - name: Build workshop image
      if: steps.process_workshops.outputs.build_image == 'true'
      uses: docker/build-push-action@v2
      with:
        context: ${{inputs.path}}
        file: ${{inputs.workshop-image-docker-file}}
        tags: ghcr.io/${{env.REPOSITORY_OWNER}}/${{env.REPOSITORY_NAME}}-image:${{env.REPOSITORY_TAG}}
        push: true
